/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package chat_client;
import java.net.*;
import java.io.*;
import java.util.*;
import javax.swing.JOptionPane;
import javax.swing.JFileChooser;
/**
 *
 * @author Zhu
 */
public class client_frame extends javax.swing.JFrame {
   String username,address="localhost";
   ArrayList<String> users=new ArrayList();
   int port=2222;
   Boolean isConnected=false;
 
    Socket sock;
    BufferedReader reader;
    PrintWriter writer;
 
    public void ListenThread(){
     Thread IncomingReader=new Thread(new IncomingReader());
     IncomingReader.start();
    }
    
    public void Disconnect(){
        try{
            //ta_chat.append("\n" + username + " Disconnected.\n");
            sock.close();
        }catch(Exception ex){
            ta_chat.append("Failed to disconnect. \n");
        }
        isConnected=false;
        tf_username.setEditable(true);
    }    
    /**
     * Creates new form client_frame
     */
    public client_frame() {
        initComponents();
    }

    public class IncomingReader implements Runnable{
        @Override
        public void run(){
            
            String[] data;
            String stream,done="Done",connect="-------------------------------------",disconnect="----------------------",chat=" ";
          
            try{
                while((stream=reader.readLine())!=null)
                {
                    data=stream.split(":");
                      
                         if(data[1].equals("has comed.")){
                             ta_users.append(data[0] + "\n");
                         }else if(data[1].equals("is here.")){
                             ta_users.setText("");
                             ta_chat.setText("");
                         }else if(data[1].equals("here")){
                             ta_users.append(data[0] + "\n");
                         }
                         else if(data[1].equals("has leaved.")){
                             ta_users.setText("");
                             ta_chat.setText("");
                             //ta_users.append(data[0] + " leaves\n");
                         }
                         else if(data[2].equals(" ")){
                             ta_chat.append("------------------------------------------------------------------\n");
                             ta_chat.append(data[0] + ":\n" + data[1] + "\n");
                         }   
                }
            }catch(Exception ex){}
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        lb_username = new javax.swing.JLabel();
        tf_username = new javax.swing.JTextField();
        b_connect = new javax.swing.JButton();
        b_disconnect = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        ta_chat = new javax.swing.JTextArea();
        tf_chat = new javax.swing.JTextField();
        b_send = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        ta_users = new javax.swing.JTextArea();
        lb_users = new javax.swing.JLabel();
        b_upload = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Chat_Client's frame");

        lb_username.setText("Type your name");

        tf_username.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tf_usernameActionPerformed(evt);
            }
        });

        b_connect.setText("Connect");
        b_connect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_connectActionPerformed(evt);
            }
        });

        b_disconnect.setText("LOGOUT");
        b_disconnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_disconnectActionPerformed(evt);
            }
        });

        ta_chat.setColumns(20);
        ta_chat.setRows(5);
        jScrollPane1.setViewportView(ta_chat);

        b_send.setText("SEND");
        b_send.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_sendActionPerformed(evt);
            }
        });

        ta_users.setColumns(20);
        ta_users.setRows(5);
        jScrollPane2.setViewportView(ta_users);

        lb_users.setText("Online Users");

        b_upload.setText("UPLOAD");
        b_upload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_uploadActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(b_upload)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 445, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lb_users)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(tf_chat, javax.swing.GroupLayout.PREFERRED_SIZE, 381, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(b_send))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lb_username)
                        .addGap(28, 28, 28)
                        .addComponent(tf_username, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39)
                        .addComponent(b_connect)
                        .addGap(67, 67, 67)
                        .addComponent(b_disconnect)))
                .addContainerGap(47, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lb_username)
                    .addComponent(tf_username, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(b_connect)
                    .addComponent(b_disconnect))
                .addGap(52, 52, 52)
                .addComponent(b_upload)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tf_chat, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(b_send)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(63, 63, 63)
                        .addComponent(lb_users)
                        .addGap(27, 27, 27)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(29, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>                        

    private void tf_usernameActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
    }                                           

    private void b_connectActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
        if(isConnected==false){
            username=tf_username.getText();
            tf_username.setEditable(false);
            
            try{
               //ta_chat.append(username + " connect");
               sock=new Socket(address,port);
               InputStreamReader streamreader=new InputStreamReader(sock.getInputStream());
               reader=new BufferedReader(streamreader);
               writer=new PrintWriter(sock.getOutputStream());
               writer.println(username + ":is on-line now.:-------------------------------------");
               writer.flush();
               isConnected=true;
               JOptionPane.showMessageDialog(null,"Welcome! " + username + " You can begin to chat");
            }catch(Exception ex){
                ta_chat.append("Cannot Connect! Try Again. \n");
                tf_username.setEditable(true);
            }
            ListenThread();

        }else if(isConnected==true){
            ta_chat.append("You are already connected.\n");
        }
    }                                         

    private void b_sendActionPerformed(java.awt.event.ActionEvent evt) {                                       
        // TODO add your handling code here:
        String nothing="";
        if((tf_chat.getText()).equals(nothing)){
            tf_chat.setText("");
            tf_chat.requestFocus();
        }else{
            try{
                //ta_chat.append("\n" + username + ": " + tf_chat.getText());
                writer.println(username + ":" + tf_chat.getText() + ":" + " ");
                writer.flush();
            }catch(Exception ex){
                ta_chat.append("Message was not sent. \n");
            }
            tf_chat.setText("");
            tf_chat.requestFocus();
        }
        tf_chat.setText("");
        tf_chat.requestFocus();
    }                                      

    private void b_disconnectActionPerformed(java.awt.event.ActionEvent evt) {                                             
        // TODO add your handling code here:
        if(isConnected==true){
            username=tf_username.getText();
            tf_username.setEditable(false);
            
            
            try{
               //ta_chat.append(username + " connect");
               sock=new Socket(address,port);
               InputStreamReader streamreader=new InputStreamReader(sock.getInputStream());
               reader=new BufferedReader(streamreader);
               writer=new PrintWriter(sock.getOutputStream());
               writer.println(username + ":is off on-line:----------------------");
               writer.flush();
               isConnected=true;
               JOptionPane.showMessageDialog(null,username + ", you logout out!");
               System.exit(0);
            }catch(Exception ex){
                ta_chat.append("Cannot Connect! Try Again. \n");
                tf_username.setEditable(true);
            }
            ListenThread();
        }else if(isConnected==false){
            ta_chat.append("You are already connected.\n");
        }
        //sendDisconnect();
        Disconnect();
    }                                            

    private void b_uploadActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
        JFileChooser chooser=new JFileChooser();
        chooser.showOpenDialog(null);
        File f=chooser.getSelectedFile();
        String filename=f.getAbsolutePath();
        ta_chat.setText(filename);
        
    }                                        
/**/
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(client_frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(client_frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(client_frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(client_frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new client_frame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton b_connect;
    private javax.swing.JButton b_disconnect;
    private javax.swing.JButton b_send;
    private javax.swing.JButton b_upload;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lb_username;
    private javax.swing.JLabel lb_users;
    private javax.swing.JTextArea ta_chat;
    private javax.swing.JTextArea ta_users;
    private javax.swing.JTextField tf_chat;
    private javax.swing.JTextField tf_username;
    // End of variables declaration                   
}
