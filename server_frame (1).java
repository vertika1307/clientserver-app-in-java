package javaapplication2;
import java.io.*;
import java.net.*;
import java.util.*;

public class server_frame extends javax.swing.JFrame {
  ArrayList clientOutputStreams;
  ArrayList<String> users;
  
  public class ClientHandler implements Runnable{
    BufferedReader reader;
    Socket sock;
    PrintWriter client;
    
    public ClientHandler(Socket clientSocket,PrintWriter user){
        client=user;
        try{
            sock=clientSocket;
            InputStreamReader isReader=new InputStreamReader(sock.getInputStream());
            reader=new BufferedReader(isReader);
        }catch(Exception ex){
            ta_chat.append("Unexcepted error...\n");
        }
    }
    
    @Override
    public void run(){
        String message,connect="-------------------------------------",disconnect="----------------------",chat=" ";
        String[] data;
        
        try{
            while((message=reader.readLine())!=null){

                data=message.split(":");
 
                if(data[1].equals("is on-line now.")){
                    userAdd(data[0]);
                }else if(data[1].equals("is off on-line")){
                    userRemove(data[0]);
                }else if(data[2].equals(" ")){
                    userChat(data[0] + ":" + data[1] + ":" + chat);
                }
            }
        }catch(Exception ex){
            //ta_chat.append(" Lost a connection.\n");
            ex.printStackTrace();
            clientOutputStreams.remove(client);
        }
    }
  }
    /**
     * Creates new form server_frame
     */
    public server_frame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        tf_users = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        ta_chat = new javax.swing.JTextArea();
        b_start = new javax.swing.JButton();
        b_exit = new javax.swing.JButton();

        tf_users.setColumns(20);
        tf_users.setRows(5);
        jScrollPane2.setViewportView(tf_users);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Chat_Server's frame");

        ta_chat.setColumns(20);
        ta_chat.setRows(5);
        jScrollPane1.setViewportView(ta_chat);

        b_start.setText("START");
        b_start.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_startActionPerformed(evt);
            }
        });

        b_exit.setText("EXIT");
        b_exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_exitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 425, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(210, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(b_start)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 277, Short.MAX_VALUE)
                .addComponent(b_exit)
                .addContainerGap(217, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(b_start)
                    .addComponent(b_exit))
                .addGap(27, 27, 27)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>                        

    private void b_startActionPerformed(java.awt.event.ActionEvent evt) {                                        
        // TODO add your handling code here:
        Thread starter = new Thread(new ServerStart());
        starter.start();    
        ta_chat.append("Server started...\n");
    }                                       

    private void b_exitActionPerformed(java.awt.event.ActionEvent evt) {                                       
        // TODO add your handling code here:
        System.exit(0);
    }                                      

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(server_frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(server_frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(server_frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(server_frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new server_frame().setVisible(true);
            }
        });
        
    }
    
    public class ServerStart implements Runnable 
    {
        @Override

        public void run() 
        {
            clientOutputStreams = new ArrayList();
            users = new ArrayList();  

            try 
            {
                ServerSocket serverSock = new ServerSocket(2222);
               while (true) 
               {
                 Socket clientSock = serverSock.accept();
	         PrintWriter writer = new PrintWriter(clientSock.getOutputStream());
                 
	         clientOutputStreams.add(writer);

                                //System.out.println(writer);
		 Thread listener = new Thread(new ClientHandler(clientSock, writer));
		 listener.start();
		 //ta_chat.append("Got a connection. \n");
                }
            }
            catch (Exception ex)
            {
                ta_chat.append("Error making a connection. \n");
            }
        }
    }
    
    public void userChat(String data){
        users.add(data);
   
        tellEveryone(data);
    }
    public void userAdd(String data){
        String message, add = "has comed.", done = " ", name = data;
        users.add(name);
 
        String[] tempList = new String[(users.size())];
        users.toArray(tempList);
        for (String token:tempList) 
        {
            message = (token + ":has comed.:");
            tellEveryone(message);
        }
   }
  
    public void userRemove (String data) 
    {
       
        String message, add = "has leaved.", done = " ", name = data;
        users.remove(name);
        message=name + ":has leaved.: ";
        tellEveryone(message);
     
    }
    
    public void tellEveryone(String message) 
    {
	Iterator it = clientOutputStreams.iterator();

        while (it.hasNext()) 
        {
            try 
            {
                PrintWriter writer = (PrintWriter) it.next();
                
		writer.println(message);
                writer.flush();
                ta_chat.setCaretPosition(ta_chat.getDocument().getLength());
            } 
            catch (Exception ex) 
            {
               ta_chat.append("Error telling everyone. \n");
            }
        } 
    }

    
    // Variables declaration - do not modify                     
    private javax.swing.JButton b_exit;
    private javax.swing.JButton b_start;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private static javax.swing.JTextArea ta_chat;
    private javax.swing.JTextArea tf_users;
    // End of variables declaration                   
}
